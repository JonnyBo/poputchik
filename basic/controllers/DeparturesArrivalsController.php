<?php
namespace app\controllers;

use app\models\Clients;
use app\models\Drivers;
use Yii;
use yii\web\Controller;
use yii\filters\AccessControl;
use yii\data\Pagination;
use app\models\Departures;
use app\models\Arrivals;
use yii\caching\FileCache;
use yii\data\ArrayDataProvider;

class DeparturesArrivalsController extends Controller
{
    public $currentUser;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if (Yii::$app->user->can('driver')) {
            $this->currentUser = Drivers::findByUserId();
        } else {
            $this->currentUser = Yii::$app->user;
        }

    }

    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['index','create','delete','table'],
                'rules' => [
                    [
                        'allow' => false,
                        'actions' => ['index','create','delete','table'],
                        'roles' => ['?'],
                    ],
                    [
                        'allow' => true,
                        'actions' => ['index','create','delete','table'],
                        'roles' => ['admin'],
                    ],
                    [
                        'allow' => true,
                        'actions' => ['index','create','delete','table'],
                        'roles' => ['driver'],
                    ],
                ],
            ],
        ];
    }

    public function beforeAction($action) {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action);
    }

    public function actionIndex()
    {

        if (Yii::$app->user->can('driver')) {
            $this->redirect('/departures-arrivals/table', 301);
        }
        $userRole = Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId());

        $rendered_grid_left = Yii::$app->JqgridTable->jqSimple('jqArrivals');
        $rendered_grid_right = Yii::$app->JqgridTable->jqSimple('jqDepartures');
        return $this->render('index', [
            'rendered_grid_left' => $rendered_grid_left,
            'rendered_grid_right' => $rendered_grid_right,
            'userRole' => $userRole
        ]);

    }

    public function actionTable()
    {
        $from_date = Yii::$app->request->get('from_date');
        $to_date = Yii::$app->request->get('to_date');
        $where = [];
        if (isset($from_date) && isset($to_date)) {
            $from_date = Yii::$app->formatter->asDatetime($from_date, 'php:Y-m-d');
            $to_date = Yii::$app->formatter->asDatetime($to_date, 'php:Y-m-d');
            $where = ['between', 'date', $from_date, $to_date];
        } else {
            $where = ['between', 'date', date('Y-m-d'), date('Y-m-d')];
        }
        $driver = Drivers::find()->where(['user_id' => Yii::$app->user->getId()])->one();
        $userRole = Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId());
        $arrivals = Arrivals::find()->where(['type' => 'arrivals', 'driver_id' => 0])->orWhere(['type' => 'arrivals', 'driver_id' => $driver['id']])->andWhere($where)->orderBy(['date' => SORT_DESC])->all();
        $departures = Arrivals::find()->where(['type' => 'departures', 'driver_id' => 0])->orWhere(['type' => 'departures', 'driver_id' => $driver['id']])->andWhere($where)->orderBy(['date' => SORT_DESC])->all();

        $dataProvider_left = new ArrayDataProvider([
            'allModels' => $departures,
            'sort' => [
                'attributes' => [
                    'date'
                ],
            ],
            'pagination' => [
                'pageSize' => 200
            ],
        ]);
        $dataProvider_right = new ArrayDataProvider([
            'allModels' => $arrivals,
            'sort' => [
                'attributes' => ['date'],
            ],
            'pagination' => [
                'pageSize' => 200
            ],
        ]);
        return $this->render('table', [
            'dataProvider_left' => $dataProvider_left,
            'dataProvider_right' => $dataProvider_right,
            'arrivals' => $arrivals,
            'departures' => $departures,
            'userRole' => $userRole
        ]);

    }

    public function actionCreate()
    {
        $needRecords = 10000;

        for($count = 1;$count <= $needRecords;$count ++){
            $number_a = sprintf("38044%'.03d%'.02d%'.02d", rand(0,999),rand(0,99),rand(0,99)) ;
            $number_b = sprintf("38050%'.03d%'.02d%'.02d", rand(0,999),rand(0,99),rand(0,99)) ;

            $date_start =  self::randDate('2016-01-01 00:00:01','2016-12-31 23:59:59');
            $date_connect =  self::randTimePlus($date_start,1,30);
            $date_end =  self::randTimePlus($date_connect,0,1800);

            $fields = array(
                'number_a' => $number_a,
                'number_b' => $number_b,
                'date_start'=> $date_start,
                'date_connect' => $date_connect,
                'date_end'=>$date_end,
                'call_direction' => rand(1,2) ,
                'comment'=> 'Some text '.$count,
            );

           if( AnalyticsPhone::create($fields) ){
               $query[] = "[i] {$count}  Запись успешно добавлена " . self::array2string($fields);
           }else{
               $query[] = "[w] Ошибка добавления " . self::array2string($fields);
           }

        }

        $cache = new FileCache;
        $cacheKey = 'AnalyticsPhone_totalStats';
        $cache->set($cacheKey, false);

        return $this->render('create', [
            'results' => $query,
        ]);
    }

    public function actionDelete()
    {
        //todo: сделать с предупреждением
           if( AnalyticsPhone::delete(true) ){
               $query[] = "[d]  Все данные успешно уделенны " ;
           }else{
               $query[] = "[w] Ошибка удаления " ;
           }

        $cache = new FileCache;
        $cacheKey = 'AnalyticsPhone_totalStats';
        $cache->set($cacheKey, false);

        return $this->render('create', [
            'results' => $query,
        ]);
    }

    static public function randDate($min_date, $max_date)
    {
        $start = strtotime($min_date);
        $end = strtotime($max_date);
        $randomDate = date("Y-m-d H:i:s", rand($start, $end));
        return $randomDate;
    }

    static public function randTimePlus($date,$minTimeSec = 0, $maxTimeSec = '1800')
    {
        $unixTime = strtotime($date);
        $result = $unixTime + rand($minTimeSec, $maxTimeSec);
        return date("Y-m-d H:i:s", $result);

    }

    static public function array2string($data){
        $log_a = "";
        foreach ($data as $key => $value) {
            if(is_array($value))    $log_a .= "[".$key."] => (". array2string($value). ") \n";
            else                    $log_a .= "[".$key."] => ".$value."\n";
        }
        return $log_a;
    }

    // Всплывшее модальное окно заказа водителем
    public function actionMyorder()
    {
        $id = intval(Yii::$app->request->post('id'));
        $arrival = Arrivals::findOne($id);
        $client = Clients::findOne($arrival->client_id);
        /*
        $where = ['driver_id' => 0];
        $departures = [];
        if ($arrival->type == 'arrivals') {
            //$where = ['between', 'date', $arrival->date, date('Y-m-d H:i:s', strtotime($arrival->date . ' +1 day'))];
            $departures = Arrivals::find()->where(['type' => 'departures'])->andWhere($where)->orderBy(['date' => SORT_ASC])->all();

        }
        */
        return $this->renderAjax('myorder', [
            'model' => $arrival,
            'client' => $client
        ]);
    }

    // Всплывшее модальное окно заказа водителем
    public function actionDelmyorder()
    {
        $id = intval(Yii::$app->request->post('id'));
        $arrival = Arrivals::findOne($id);
        //$driver = Drivers::findByUserId();
        Yii::$app->db->createCommand()->update('arrivals', ['driver_id' => 0], 'id = '.$arrival->id)->execute();
        /*
        $where = ['driver_id' => 0];
        $departures = [];
        if ($arrival->type == 'arrivals') {
            //$where = ['between', 'date', $arrival->date, date('Y-m-d H:i:s', strtotime($arrival->date . ' +1 day'))];
            $departures = Arrivals::find()->where(['type' => 'departures'])->andWhere($where)->orderBy(['date' => SORT_ASC])->all();

        }
        */
        /*
        return $this->renderAjax('myorder', [
            'model' => $arrival,
            'client' => $client
        ]);
        */
        echo 'ok';
    }

    // Всплывшее модальное окно принятия заказа водителем
    public function actionDriverorder()
    {
        $id = intval(Yii::$app->request->post('id'));
        $arrival = Arrivals::findOne($id);
        $where = ['driver_id' => 0];
        $departures = [];
        if ($arrival->type == 'arrivals') {
            //$where = ['between', 'date', $arrival->date, date('Y-m-d H:i:s', strtotime($arrival->date . ' +1 day'))];
            $departures = Arrivals::find()->where(['type' => 'departures'])->andWhere($where)->orderBy(['date' => SORT_ASC])->all();

        }
        $dataProvider_order = new ArrayDataProvider([
            'allModels' => Arrivals::find()->where(['id' => $id])->all(),
            'sort' => [
                'attributes' => ['date'],
            ],
            'pagination' => [
                'pageSize' => 200
            ],
        ]);
        $dataProvider = new ArrayDataProvider([
            'allModels' => $departures,
            'sort' => [
                'attributes' => ['date'],
            ],
            'pagination' => [
                'pageSize' => 200
            ],
        ]);
        return $this->renderAjax('driverorder', [
            'model' => $arrival, 'dataProvider' => $dataProvider, 'dataProvider_order' => $dataProvider_order
        ]);
    }

    public function actionSetdriver() {
        $arrival_id = intval(Yii::$app->request->post('arrival_id'));
        $driver = Drivers::findByUserId();
        $round_id = intval(Yii::$app->request->post('use'));
        //пишем в предзаказы
        Yii::$app->db->createCommand()->insert('driver_apps', [
            'date' => date('Y-m-d H:i:s'),
            'order_id' => $arrival_id,
            'driver_id' => $driver->id,
        ])->execute();
        if ($round_id) {
            Yii::$app->db->createCommand()->insert('driver_apps', [
                'date' => date('Y-m-d H:i:s'),
                'order_id' => $round_id,
                'driver_id' => $driver->id,
            ])->execute();
            $params = [':arrival_id' => $arrival_id, ':departure_id' => $round_id, ':driver_id' => $driver->id];
            $round = Yii::$app->db->createCommand('SELECT * FROM rounds WHERE (arrival_id=:arrival_id OR departure_id=:departure_id) AND driver_id=:driver_id')->bindValues($params)->queryOne();
            if ($round) {
                return json_encode('Error!');
            } else {
                Yii::$app->db->createCommand()->insert('rounds', [
                    'arrival_id' => $arrival_id,
                    'departure_id' => $round_id,
                    'driver_id' => $driver->id,
                ])->execute();
                return json_encode(true);
            }
        }
        return json_encode(true);
    }

}